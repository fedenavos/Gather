generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Trip{
  id            String     @default(cuid()) @id
  origin        String 
  originId      String?
  originMeetingPoint  String
  destination   String
  destinationId String?
  destinationMeetingPoint String
  date          DateTime  @default(now())
  totalSlots    Int
  freeSlots     Int
  description   String
  notes         String
  distance      String    @default("")
  duration      String    @default("")
  smoking       Boolean
  pets          Boolean
  kids          Boolean
  gasCost       Float
  tollsCost     Float
  othersCost    Float
  privacy       String
  inviteCode    String?   @unique @default(cuid())
  finished      Boolean   @default(false)
  driverId      String
  driver        User   @relation(fields: [driverId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "driver")
  vehicleId     String
  vehicle       Vehicle @relation(fields: [vehicleId], references: [id])
  passengers    User[] @relation(name: "passengers")
  reviews       Review[]
}

model Vehicle {
  id           String     @default(cuid()) @id
  type         String
  licensePlate String
  brand        String
  model        String
  year         String
  color        String
  seats        Int
  trips        Trip[]
  ownerId      String
  owner        User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Review {
  id           String     @default(cuid()) @id
  rating       Int
  title        String
  comment      String
  userId       String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "driverReview")
  tripId       String
  trip         Trip   @relation(fields: [tripId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviewerId   String
  reviewer     User   @relation(fields: [reviewerId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "passengerReview")
}

model User {
  id            String       @default(cuid()) @id
  name          String?
  username      String?      @unique
  bio           String?
  nationalId    String?
  phone         String?
  email         String?   @unique
  emailVerified DateTime?
  image         String? @default("https://cdn-icons-png.flaticon.com/512/1177/1177568.png")
  averageScore  Float?   @default(0)
  accounts      Account[]
  sessions      Session[]
  trips         Trip[] @relation(name: "passengers")
  finishedTrips Int? @default(0)
  tripsDriven   Trip[] @relation(name: "driver")
  finishedTripsDriven Int? @default(0)
  vehicles      Vehicle[]
  reviews       Review[] @relation(name: "driverReview")
  reviewsDone   Review[] @relation(name: "passengerReview")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  
  type               String
  provider           String
  providerAccountId  String  
  refresh_token      String? @db.Text
  refresh_token_expires_in String?
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String  
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

generator dbml {
  provider = "prisma-dbml-generator"
}